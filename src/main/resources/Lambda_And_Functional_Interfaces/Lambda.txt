Lambda:
- Building Block of Functional Programming
- No Name -> Anonymous

- Properties
    -> Name of the function
    -> Parameters list
    -> Body of the function
    -> Return type

    -> Example:
       1.Internal class anonymous
       new Runnable(){
        public void run(){
            System.out.println("Thread Executed!");
        }
       }
       2.
        public void run(){
            System.out.println("Thread Executed!");
        }
       3.
        public void (){
            System.out.println("Thread Executed!");
        }
       4.
         void (){
            System.out.println("Thread Executed!");
        }
       5.
          (){
            System.out.println("Thread Executed!");
        }
       6.
          () -> {System.out.println("Thread Executed!");}
       7.
          () -> System.out.println("Thread Executed!");

Functional Interface:
- Functional interface behind every lambda
- Interface having single abstract method
-

A functional interface in Java  has the following characteristics:
- A Single Abstract Method (SAM): A functional interface has a single abstract method, know as the Single Abstract Method (SAM).
This is the only method that must be implemented when using the interface.
- @FunctionalInterface Annotation: Although nor required, it is a good practice to use the @FunctionalInterface annotation to explicitly indicate
that interface is functional. This annotation also causes the compiler to raise an error if more abstract methods are added to the interface.
- Default  and Static Methods: A functional interface can have default and static methods, but these do not count as abstract methods.
- Lambda Expression Support: Functional interfaces can be used as target types for lambda expressions and method references, making functional programming
in Java easier.